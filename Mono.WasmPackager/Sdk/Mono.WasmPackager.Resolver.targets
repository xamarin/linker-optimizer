<Project>

  <!-- 
    The primary task in this file is _WasmPackager_Resolve, which resolves
    all the assemblies and assigns metadata.

    Inputs:
      @(_WasmPackager_RootAssemblies)
    
    Outputs:
      @(_WasmPackager_Assemblies)
        Metadata:
        - AOT - boolean
        - Name - Assembly base name
        - SkipCopy - boolean
        - SkipLink - boolean
        - CilStripOutput
        - LinkerInput
        - LinkerOutput
        - AotInput
        - DepFile

      @(_WasmPackager_FileList)

    Make sure to only edit those two in pairs:
      @(_WasmPackager_Copy_Inputs)
      @(_WasmPackager_Copy_Outputs)
  -->

  <PropertyGroup>
    <_WasmPackager_PackagerAssembly>$(MSBuildThisFileDirectory)\..\tools\Mono.WasmPackager.dll</_WasmPackager_PackagerAssembly>
  </PropertyGroup>
  <UsingTask TaskName="Mono.WasmPackager.WasmResolverTask" AssemblyFile="$(_WasmPackager_PackagerAssembly)" />

  <ItemGroup>
    <PackageReference Include="Mono.WebAssembly.Bindings" Version="$(MonoWebAssemblySdkVersion)" />
    <PackageReference Include="Mono.WebAssembly.Framework" Version="$(MonoWebAssemblySdkVersion)" />
    <PackageReference Include="Mono.WebAssembly.Runtime" Version="$(MonoWebAssemblySdkVersion)" />
    <PackageReference Include="Mono.WebAssembly.Runtime.Aot" Version="$(MonoWebAssemblySdkVersion)" />
    <PackageReference Include="Mono.WebAssembly.Tools" Version="$(MonoWebAssemblySdkVersion)" />
    <PackageReference Include="Mono.WebAssembly.NetCore" Version="$(MonoWebAssemblySdkVersion)" />
  </ItemGroup>

  <!-- Derived and private settings -->
  <PropertyGroup Condition="'$(WasmPackager_EnablePackager)' == 'true'">
    <_WasmPackager_EnableEmcc Condition="'$(WasmPackager_NetCore)' == 'true'">false</_WasmPackager_EnableEmcc>
    <_WasmPackager_EnableEmcc Condition="'$(_WasmPackager_EnableEmcc)' == ''">true</_WasmPackager_EnableEmcc>

    <_WasmPackager_EnableAot Condition="'$(WasmPackager_NetCore)' == 'true'">false</_WasmPackager_EnableAot>
    <_WasmPackager_EnableAot Condition="'$(_WasmPackager_EnableAot)' != 'false' AND ('$(WasmPackager_ExecMode)' == 'Aot' OR '$(WasmPackager_ExecMode)' == 'AotInterp')">true</_WasmPackager_EnableAot>

    <_WasmPackager_EnableDedup Condition="'$(WasmPackager_EnableLinker)' == 'true' OR '$(_WasmPackager_EnableAot)' == 'true'">true</_WasmPackager_EnableDedup>
    <_WasmPackager_EnableDedup Condition="'$(_WasmPackager_EnableDedup)' != 'true' OR '$(WasmPackager_NetCore)' == 'true'">false</_WasmPackager_EnableDedup>

    <!-- Copy from the public property and turn it off when it's not supported. -->
    <_WasmPackager_CilStrip>$(WasmPackager_CilStrip)</_WasmPackager_CilStrip>
    <_WasmPackager_CilStrip Condition="'$(WasmPackager_ExecMode)' != 'Aot'">false</_WasmPackager_CilStrip>
    <_WasmPackager_CilStrip Condition="'$(WasmPackager_EnableDebug)' == 'true'">false</_WasmPackager_CilStrip>

    <_WasmPackager_MonoConfig>$(WasmPackager_BuildDir)/mono-config.js</_WasmPackager_MonoConfig>
    <_WasmPackager_DriverGen>$(WasmPackager_BuildDir)/driver-gen.c</_WasmPackager_DriverGen>

    <_WasmPackager_EnableZLib Condition="'$(WasmPackager_NetCore)' != 'true'">true</_WasmPackager_EnableZLib>
  </PropertyGroup>

  <PropertyGroup Condition="'$(_WasmPackager_EnableEmcc)' == 'true'">
    <WasmPackager_Emcc_Flags>-Oz -g -s DISABLE_EXCEPTION_CATCHING=0 -s ASSERTIONS=1 -s WASM=1 -s ALLOW_MEMORY_GROWTH=1 -s BINARYEN=1 -s TOTAL_MEMORY=134217728 -s ALIASING_FUNCTION_POINTERS=0 -s NO_EXIT_RUNTIME=1 -s ERROR_ON_UNDEFINED_SYMBOLS=1 -s "EXTRA_EXPORTED_RUNTIME_METHODS=['ccall', 'cwrap', 'setValue', 'getValue', 'UTF8ToString']" -s "EXPORTED_FUNCTIONS=['___cxa_is_pointer_type', '___cxa_can_catch']" -s "DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=['setThrew', 'memset']"</WasmPackager_Emcc_Flags>
    <WasmPackager_Emcc_Flags Condition="('$(_WasmPackager_EnableAot)' != 'true') AND ('$(WasmPackager_LinkIcalls)' == 'true')">$(WasmPackager_Emcc_Flags) --llvm-lto 1</WasmPackager_Emcc_Flags>

    <WasmPackager_Emcc_Link_Flags Condition="('$(WasmPackager_EnableDebug)' == 'true')">-O0</WasmPackager_Emcc_Link_Flags>
    <WasmPackager_Emcc_Output>$(WasmPackager_BuildDir)/dotnet.js</WasmPackager_Emcc_Output>

    <_WasmPackager_MonoCrossBin>$(WasmPackager_MonoRuntimeAotDir)/bin/wasm32-unknown-none-mono-sgen</_WasmPackager_MonoCrossBin>
  </PropertyGroup>

  <PropertyGroup>
    <_WasmPackager_ConfigCache>$(WasmPackager_BuildDir)/packager-config.cache</_WasmPackager_ConfigCache>
    <_WasmPackager_ResolveCache>$(WasmPackager_BuildDir)/packager-resolve.cache</_WasmPackager_ResolveCache>
  </PropertyGroup>

  <!-- Resolve some conditional properties -->
  <Target Name="_WasmPackager_ResolveProperties" Outputs="$(_WasmPackager_ConfigCache)">

    <Error Text="The 'EMSDK_PATH' environment variable must be set." Condition="'$(_WasmPackager_EnableEmcc)' == 'true' AND '$(EMSDK_PATH)' == ''" />

    <!-- Sanity checks for NetCore -->
    <Error Text="Cannot use both _WasmPackager_SkipSdkImport and WasmPackager_NetCore" Condition="'$(_WasmPackager_SkipSdkImport)' == 'true' AND '$(WasmPackager_NetCore)' == 'true'" />

    <PropertyGroup>
      <_WasmPackager_LinkerInput_Dir Condition="'$(WasmPackager_EnableLinker)' == 'true'">$(WasmPackager_BuildDir)/linker-in</_WasmPackager_LinkerInput_Dir>
      <_WasmPackager_LinkerOutput_Dir Condition="'$(WasmPackager_EnableLinker)' == 'true'">$(WasmPackager_BuildDir)/linker-out</_WasmPackager_LinkerOutput_Dir>
      <_WasmPackager_LinkerOutput_Dir Condition="'$(WasmPackager_EnableLinker)' != 'true'">$(WasmPackager_BuildDir)</_WasmPackager_LinkerOutput_Dir>
      <_WasmPackager_AotInput_Dir>$(_WasmPackager_LinkerOutput_Dir)</_WasmPackager_AotInput_Dir>
      <_WasmPackager_CilStripOutput_Dir Condition="'$(_WasmPackager_CilStrip)' == 'true'">$(WasmPackager_BuildDir)/ilstrip-out</_WasmPackager_CilStripOutput_Dir>
      <_WasmPackager_AotDummy Condition="'$(_WasmPackager_EnableDedup)' == 'true'">$(_WasmPackager_AotInput_Dir)/aot-dummy.dll</_WasmPackager_AotDummy>
    </PropertyGroup>

    <PropertyGroup Condition="'$(_WasmPackager_EnableEmcc)' == 'true'">
      <_WasmPackager_PInvokeTable Condition="'@(WasmPackager_PInvokeLibraries)' != ''">$(WasmPackager_BuildDir)/pinvoke-table.h</_WasmPackager_PInvokeTable>
      <_WasmPackager_IcallTable Condition="'$(WasmPackager_LinkIcalls)' == 'true'">$(WasmPackager_BuildDir)/icall-table.h</_WasmPackager_IcallTable>

      <WasmPackager_Emscripten_SdkDir>$(EMSDK_PATH)</WasmPackager_Emscripten_SdkDir>
      <WasmPackager_Emcc_Flags Condition="'$(_WasmPackager_PInvokeTable)' != ''">$(WasmPackager_Emcc_Flags) -DGEN_PINVOKE</WasmPackager_Emcc_Flags>

      <__WasmPackager_Driver_Emcc_Flags Condition="'$(WasmPackager_ExecMode)' == 'Aot'">$(__WasmPackager_Driver_Emcc_Flags) -DENABLE_AOT=1</__WasmPackager_Driver_Emcc_Flags>
      <__WasmPackager_Driver_Emcc_Flags Condition="'$(WasmPackager_AddBinding)' == 'true'">$(__WasmPackager_Driver_Emcc_Flags) -DCORE_BINDINGS=1</__WasmPackager_Driver_Emcc_Flags>
    </PropertyGroup>

    <ItemGroup>
      <_WasmPackager_RootAssemblies Include="@(IntermediateAssembly)" />

      <_WasmPackager_SdkSources Include="pinvoke-tables-default.h" Condition="'$(WasmPackager_NetCore)' != 'true'"/>

      <_WasmPackager_AppBundle_Files Include="runtime.js">
        <Source>$(WasmPackager_MonoRuntimePath)/src/$(WasmPackager_RuntimeTemplate)</Source>
      </_WasmPackager_AppBundle_Files>
      <_WasmPackager_AppBundle_Files Include="mono-config.js" />

      <_WasmPackager_AppBundle_Files_DotNet Include="dotnet.wasm;dotnet.js" />
      <_WasmPackager_AppBundle_Files Include="@(_WasmPackager_AppBundle_Files_DotNet)">
        <Source Condition="'$(_WasmPackager_EnableEmcc' != 'true'">$(WasmPackager_MonoRuntimePath)/debug/%(Identity)</Source>
      </_WasmPackager_AppBundle_Files>
    </ItemGroup>

    <ItemGroup Condition="'$(_WasmPackager_EnableEmcc)' == 'true'">
      <_WasmPackager_SdkSources Include="driver.c">
        <Emcc_Flags>-DDRIVER_GEN=1 $(__WasmPackager_Driver_Emcc_Flags)</Emcc_Flags>
        <Emcc_Deps>$(_WasmPackager_IcallTable);$(_WasmPackager_PInvokeTable)</Emcc_Deps>
      </_WasmPackager_SdkSources>

      <_WasmPackager_SdkSources Include="zlib-helper.c" Condition="'$(_WasmPackager_EnableZLib)' == 'true'">
        <Emcc_Flags>-s USE_ZLIB=1</Emcc_Flags>
      </_WasmPackager_SdkSources>

      <_WasmPackager_SdkSources Include="corebindings.c" Condition="'$(WasmPackager_AddBinding)' == 'true'" />

      <_WasmPackager_AotBaseArgs Include="llvmonly;asmonly;no-opt;static;direct-icalls;deterministic" />
      <_WasmPackager_AotBaseArgs Include="llvm-path=$(WasmPackager_Emscripten_SdkDir)/upstream/bin" />

      <_WasmPackager_AotArgs Include="@(WasmPackager_Profilers->'--profile=%(Identity)')" />
      <_WasmPackager_AotArgs Include="profile=$(WasmPackager_AotProfile),profile-only" Condition="'$(WasmPackager_AotProfile)' != ''" />
      <_WasmPackager_AotArgs Include="interp" Condition="'$(WasmPackager_ExecMode)' == 'AotInterp'" />
      <_WasmPackager_AotArgs Include="dedup-skip" Condition="'$(_WasmPackager_EnableDedup)' == 'true'" />
      <_WasmPackager_AotArgs Include="@(_WasmPackager_AotBaseArgs)" />

      <_WasmPackager_Js_Libs Include="library_mono.js;dotnet_support.js" />
    </ItemGroup>

    <ItemGroup Condition="'$(WasmPackager_NetCore)' == 'true'">
      <_WasmPackager_Runtime_Libs Include="libmonosgen-2.0.a;libSystem.Native.a" />
    </ItemGroup>
    <ItemGroup Condition="'$(WasmPackager_NetCore)' != 'true'">
      <_WasmPackager_Runtime_Libs Include="libmonosgen-2.0.a;libmono-native.a" />
      <_WasmPackager_Runtime_Libs Include="@(WasmPackager_Profilers->'libmono-profiler-%(Identity)-static.a')"/>
    </ItemGroup>

    <ItemGroup Condition="'$(WasmPackager_AddBinding)' == 'true'">
      <_WasmPackager_Js_libs Include="binding_support.js" />
    </ItemGroup>

    <ItemGroup Condition="'$(WasmPackager_LinkIcalls)' == 'true' OR '$(WasmPackager_ExecMode)' == 'Interp' OR '$(WasmPackager_ExecMode)' == 'AotInterp'">
      <_WasmPackager_Runtime_Libs Include="libmono-ee-interp.a;libmono-ilgen.a" />
      <_WasmPackager_Runtime_Libs Include="libmono-icall-table.a" Condition="'$(WasmPackager_LinkIcalls)' != 'true'" />
    </ItemGroup>

    <Message Importance="High" Text="WasmPackager - Resolve Properties: $(WasmPackager_MonoBclPath)" />
    <Message Importance="High" Text="  RootAssemblies: %(_WasmPackager_RootAssemblies.Identity)" />
    <Message Importance="High" Text="  ItermediateAssembly: %(IntermediateAssembly.Identity)" />
    <Message Importance="High" Text="  Sdk Sources: %(_WasmPackager_SdkSources.Identity)" />
    <Message Importance="High" Text="  CilStrip: $(_WasmPackager_CilStrip)" />

    <!-- Keep this at the end to assign default metadata -->
    <ItemGroup>
      <_WasmPackager_SdkSources>
        <Source Condition="'%(_WasmPackager_SdkSources.Source)' == ''">$(WasmPackager_MonoRuntimePath)/src/%(Identity)</Source>
        <Intermediate Condition="'%(_WasmPackager_SdkSources.Intermediate)' == ''">$(WasmPackager_BuildDir)/%(Filename)%(Extension)</Intermediate>
        <Emcc_Output Condition="'%(_WasmPackager_SdkSources.Emcc_Output)' == '' AND '%(Extension)' == '.c'">$(WasmPackager_BuildDir)/%(Filename).o</Emcc_Output>
      </_WasmPackager_SdkSources>
      <_WasmPackager_Runtime_Libs>
        <Path>$(WasmPackager_MonoLibDir)/%(Identity)</Path>
      </_WasmPackager_Runtime_Libs>
      <_WasmPackager_Js_Libs>
        <Path>$(WasmPackager_MonoRuntimePath)/src/%(Identity)</Path>
      </_WasmPackager_Js_Libs>
      <_WasmPackager_AppBundle_Files>
        <Source Condition="'%(_WasmPackager_AppBundle_Files.Source)' == ''">$(WasmPackager_BuildDir)/%(Identity)</Source>
        <AppPath Condition="'%(_WasmPackager_AppBundle_Files.AppPath)' == ''">$(WasmPackager_AppDir)/%(Identity)</AppPath>
      </_WasmPackager_AppBundle_Files>
    </ItemGroup>

    <!--
      Include everything here that's supposed to be set by the user and separate item lists.
      We will write this into a digest file $(_WasmPackager_ConfigCache) that can be used as
      input dependency in some of the targets.
    -->
    <ItemGroup>
      <__WasmPackager_AllConfigItems Include="'$(WasmPackager_RuntimeTemplate)';'$(WasmPackager_EnableDebug)';'$(WasmPackager_Emscripten_SdkDir)'" />
      <__WasmPackager_AllConfigItems Include="'$(WasmPackager_BuildDir)';'$(WasmPackager_VfsPrefix)';'$(WasmPackager_DeployPrefix)'" />
      <__WasmPackager_AllConfigItems Include="'$(WasmPackager_LinkIcalls)';'$(WasmPackager_EnableLinker)';'$(_WasmPackager_EnableAot)'" />
      <__WasmPackager_AllConfigItems Include="R;@(_WasmPackager_RootAssemblies);P;@(WasmPackager_Profilers);I;@(WasmPackager_PInvokeLibraries)" />
    </ItemGroup>

    <Hash ItemsToHash="@(__WasmPackager_AllConfigItems)">
      <Output TaskParameter="HashResult" PropertyName="_WasmPackager_ConfigHash" />
    </Hash>

    <WriteLinesToFile
      Lines="$(_WasmPackager_ConfigHash)"
      File="$(_WasmPackager_ConfigCache)"
      Overwrite="True"
      WriteOnlyWhenDifferent="True" />

    <Message Importance="High" Text="Wasm packager - got config hash $(_WasmPackager_ConfigHash)" />
  </Target>


  <Target
      Name="_WasmPackager_Resolve"
      Outputs="$(_WasmPackager_ResolveCache)"
      DependsOnTargets="_WasmPackager_ResolveProperties">

    <ItemGroup>
      <_WasmPackager_RootAssemblies Include="@(IntermediateAssembly)" />
    </ItemGroup>

    <Message Importance="High" Text="WasmPackager - resolving assemblies with root $(WasmPackager_MonoBclPath)" />
    <Message Importance="Normal" Text="  MonoBclPath: $(WasmPackager_MonoBclPath)" />
    <Message Importance="Normal" Text="  RootAssemblies: %(_WasmPackager_RootAssemblies.Identity)" />
    <Message Importance="Normal" Text="  FrameworkDirectories: %(WasmPackager_FrameworkDirectories.Identity)" />
    <Message Importance="Normal" Text="  MonoWasmFrameworkPath: $(MonoWebAssemblyFrameworkRoot)" />
    <Message Importance="Normal" Text="  MonoWasmBindingsPath: $(MonoWebAssemblyBindingsRoot)" />

    <PropertyGroup Condition="'$(WasmPackager_NetCore)' == 'true'">
      <__WasmPackager_Resolver_Framework>netcoreapp5.0</__WasmPackager_Resolver_Framework>
      <__WasmPackager_Resolver_NetCoreDir>$(MonoWebAssemblyFrameworkRoot)</__WasmPackager_Resolver_NetCoreDir>
    </PropertyGroup>

    <Message Importance="Normal" Text="  Framework: $(__WasmPackager_Resolver_Framework)" Condition="'$(__WasmPackager_Resolver_Framework)' != ''" />
    <Message Importance="Normal" Text="  NetCoreAppDir: $(__WasmPackager_Resolver_NetCoreDir)" Condition="'$(__WasmPackager_Resolver_NetCoreDir)' != ''" />

    <WasmResolverTask
        MonoBclPath="$(WasmPackager_MonoBclPath)"
        RootAssemblies="@(_WasmPackager_RootAssemblies)"
        FrameworkDirectories="@(WasmPackager_FrameworkDirectories)"
        MonoWasmFrameworkPath="$(MonoWebAssemblyFrameworkRoot)"
        MonoWasmRuntimePath="$(MonoWebAssemblyRuntimeRoot)"
        MonoWasmBindingsPath="$(MonoWebAssemblyBindingsRoot)"
        Framework="$(__WasmPackager_Resolver_Framework)"
        NetCoreAppDir="$(__WasmPackager_Resolver_NetCoreDir)"
        EnableAot="$(_WasmPackager_EnableAot)"
        AddBinding="$(WasmPackager_AddBinding)"
        EnableDebug="$(WasmPackager_EnableDebug)"
        UserPdbOnly="$(WasmPackager_UserPdbOnly)">
        <Output TaskParameter="Assemblies" ItemName="_WasmPackager_Assemblies" />
        <Output TaskParameter="FileList" ItemName="_WasmPackager_FileList" />
    </WasmResolverTask>

    <ItemGroup Condition="'$(_WasmPackager_EnableDedup)' == 'true'">
      <_WasmPackager_Assemblies Include="$(_WasmPackager_AotDummy)">
        <Name>aot-dummy</Name>
        <AOT>true</AOT>
        <PDB>false</PDB>
        <Dummy>true</Dummy>
        <SkipCopy>true</SkipCopy>
        <SkipLink>true</SkipLink>
      </_WasmPackager_Assemblies>
      <_WasmPackager_FileList Include="aot-dummy.dll" />
    </ItemGroup>

    <ItemGroup>
      <_WasmPackager_Assemblies>
        <LinkerOutput>$(_WasmPackager_LinkerOutput_Dir)/%(Filename)%(Extension)</LinkerOutput>
      </_WasmPackager_Assemblies>
    </ItemGroup>

    <ItemGroup Condition="'$(WasmPackager_EnableLinker)' == 'true'">
      <_WasmPackager_Assemblies>
        <LinkerInput>$(_WasmPackager_LinkerInput_Dir)/%(Filename)%(Extension)</LinkerInput>
      </_WasmPackager_Assemblies>
    </ItemGroup>

    <Message Importance="Normal" Text="TEST: $(WasmPackager_EnableLinker) $(WasmPackager_BuildDir) $(_WasmPackager_AotInput_Dir)" />

    <ItemGroup Condition="'$(_WasmPackager_EnableAot)' == 'true'">
      <_WasmPackager_Assemblies>
        <AotInput>$(_WasmPackager_AotInput_Dir)/%(Filename)%(Extension)</AotInput>
        <DepFile>$(_WasmPackager_AotInput_Dir)/%(Filename).depfile</DepFile>
        <LlvmOutFileTemp>$(_WasmPackager_AotInput_Dir)/%(Filename).bc.tmp</LlvmOutFileTemp>
        <LlvmOutFile>$(_WasmPackager_AotInput_Dir)/%(Filename).bc</LlvmOutFile>
        <Emcc_Output>$(_WasmPackager_AotInput_Dir)/%(Filename).o</Emcc_Output>
      </_WasmPackager_Assemblies>
    </ItemGroup>

    <ItemGroup>
      <_WasmPackager_Assemblies Condition="'$(_WasmPackager_CilStrip)' == 'true'">
        <CilStripInput>$(_WasmPackager_AotInput_Dir)/%(Filename)%(Extension)</CilStripInput>
        <CilStripOutput>$(_WasmPackager_CilStripOutput_Dir)/%(Filename)%(Extension)</CilStripOutput>
        <FinalPath>$(_WasmPackager_CilStripOutput_Dir)/%(Filename)%(Extension)</FinalPath>
      </_WasmPackager_Assemblies>
      <_WasmPackager_Assemblies Condition="'$(_WasmPackager_CilStrip)' != 'true'">
        <FinalPath>$(_WasmPackager_AotInput_Dir)/%(Filename)%(Extension)</FinalPath>
      </_WasmPackager_Assemblies>
      <_WasmPackager_Assemblies>
        <AppPath Condition="'%(_WasmPackager_Assemblies.AppPath)' == ''">$(WasmPackager_AppDir)/$(WasmPackager_DeployPrefix)/%(Filename)%(Extension)</AppPath>
      </_WasmPackager_Assemblies>
      <_WasmPackager_Assemblies Condition="'$(WasmPackager_EnableDebug)' == 'true'">
        <FinalPath_PDB Condition="'%(PDB)' == 'true'">$([System.IO.Path]::ChangeExtension('%(FinalPath)','.pdb'))</FinalPath_PDB>
        <AppPath_PDB Condition="'%(PDB)' == 'true'">$([System.IO.Path]::ChangeExtension('%(AppPath)','.pdb'))</AppPath_PDB>
      </_WasmPackager_Assemblies>
    </ItemGroup>

    <!-- Set default values for all metadata, so we can use the short %(Name) syntax. -->
    <ItemGroup>
      <_WasmPackager_Assemblies>
        <PDB Condition="'%(_WasmPackager_Assemblies.PDB)' == ''">false</PDB>
        <AOT Condition="'%(_WasmPackager_Assemblies.AOT)' == ''">false</AOT>
        <Dummy Condition="'%(_WasmPackager_Assemblies.Dummy)' == ''">false</Dummy>
        <SkipCopy Condition="'%(_WasmPackager_Assemblies.SkipCopy)' == ''">false</SkipCopy>
      </_WasmPackager_Assemblies>
    </ItemGroup>

    <!-- Make sure to always modify these in pairs -->
    <ItemGroup>
      <_WasmPackager_Copy_Inputs Include="%(_WasmPackager_SdkSources.Source)" />
      <_WasmPackager_Copy_Outputs Include="%(_WasmPackager_SdkSources.Intermediate)" />
    </ItemGroup>

    <ItemGroup Condition="'$(WasmPackager_EnableLinker)' == 'true'">
      <_WasmPackager_Copy_Inputs Include="%(_WasmPackager_Assemblies.Identity)" Condition="'%(_WasmPackager_Assemblies.LinkerInput)' != '' AND '%(_WasmPackager_Assemblies.SkipCopy)' != 'true'" />
      <_WasmPackager_Copy_Outputs Include="%(_WasmPackager_Assemblies.LinkerInput)" Condition="'%(_WasmPackager_Assemblies.LinkerInput)' != '' AND '%(_WasmPackager_Assemblies.SkipCopy)' != 'true'" />
    </ItemGroup>
    <ItemGroup Condition="'$(WasmPackager_EnableLinker)' != 'true'">
      <_WasmPackager_Copy_Inputs Include="%(_WasmPackager_Assemblies.Identity)" Condition="'%(_WasmPackager_Assemblies.LinkerOutput)' != '' AND '%(_WasmPackager_Assemblies.SkipCopy)' != 'true'" />
      <_WasmPackager_Copy_Outputs Include="%(_WasmPackager_Assemblies.LinkerOutput)" Condition="'%(_WasmPackager_Assemblies.LinkerOutput)' != '' AND '%(_WasmPackager_Assemblies.SkipCopy)' != 'true'" />
    </ItemGroup>

    <!-- Copy PDB Files -->

    <ItemGroup Condition="'$(WasmPackager_EnableDebug)' == 'true'">
      <_WasmPackager_Assemblies>
        <PDB_File Condition="'%(PDB)' == 'true'">$([System.IO.Path]::ChangeExtension('%(Identity)', '.pdb'))</PDB_File>
      </_WasmPackager_Assemblies>
    </ItemGroup>
    <ItemGroup Condition="'$(WasmPackager_EnableDebug)' == 'true' AND '$(WasmPackager_EnableLinker)' == 'true'">
      <_WasmPackager_Assemblies>
        <LinkerInput_Pdb Condition="'%(PDB)' == 'true'">$(_WasmPackager_LinkerInput_Dir)/%(Filename).pdb</LinkerInput_Pdb>
        <LinkerOutput_Pdb Condition="'%(PDB)' == 'true'">$(_WasmPackager_LinkerOutput_Dir)/%(Filename).pdb</LinkerOutput_Pdb>
      </_WasmPackager_Assemblies>
      <_WasmPackager_Copy_Inputs Include="%(_WasmPackager_Assemblies.PDB_File)" Condition="'%(_WasmPackager_Assemblies.PDB)' == 'true' AND '%(_WasmPackager_Assemblies.SkipCopy)' != 'true'" />
      <_WasmPackager_Copy_Outputs Include="%(_WasmPackager_Assemblies.LinkerInput_Pdb)" Condition="'%(_WasmPackager_Assemblies.PDB)' == 'true' AND '%(_WasmPackager_Assemblies.SkipCopy)' != 'true'" />
    </ItemGroup>
    <ItemGroup Condition="'$(WasmPackager_EnableDebug)' == 'true' AND '$(WasmPackager_EnableLinker)' != 'true'">
      <_WasmPackager_Assemblies>
        <LinkerOutput_Pdb Condition="'%(PDB)' == 'true'">$(_WasmPackager_AotInput_Dir)/%(Filename).pdb</LinkerOutput_Pdb>
      </_WasmPackager_Assemblies>
      <_WasmPackager_Copy_Inputs Include="%(_WasmPackager_Assemblies.PDB_File)" Condition="'%(_WasmPackager_Assemblies.PDB)' == 'true' AND '%(_WasmPackager_Assemblies.SkipCopy)' != 'true'" />
      <_WasmPackager_Copy_Outputs Include="%(_WasmPackager_Assemblies.LinkerOutput_Pdb)" Condition="'%(_WasmPackager_Assemblies.PDB)' == 'true' AND '%(_WasmPackager_Assemblies.SkipCopy)' != 'true'" />
    </ItemGroup>

    <ItemGroup>
      <WasmPackager_Emcc_Sources Include="@(_WasmPackager_SdkSources)" Condition="'%(_WasmPackager_SdkSources.Emcc_Output)' != ''">
        <Emcc_Input>%(Intermediate)</Emcc_Input>
        <Emcc_Flags>%(_WasmPackager_SdkSources.Emcc_Flags) -I$(WasmPackager_MonoIncludeDir)</Emcc_Flags>
      </WasmPackager_Emcc_Sources>
      <WasmPackager_Emcc_Sources Include="@(_WasmPackager_Assemblies)" Condition="'%(_WasmPackager_Assemblies.Emcc_Output)' != ''">
        <Emcc_Input>%(_WasmPackager_Assemblies.LlvmOutFile)</Emcc_Input>
        <Emcc_Flags>%(_WasmPackager_Assemblies.Emcc_Flags)</Emcc_Flags>
      </WasmPackager_Emcc_Sources>
      <WasmPackager_Emcc_Libraries Include="%(_WasmPackager_Runtime_Libs.Path)" />
      <WasmPackager_Emcc_JsLibraries Include="%(_WasmPackager_Js_Libs.Path)" />
    </ItemGroup>

    <Message Importance="Normal" Text="  Assemblies: %(_WasmPackager_Assemblies.Name) - %(_WasmPackager_Assemblies.Identity)" />
    <Message Importance="Normal" Text="  FileList: %(_WasmPackager_FileList.Identity)" />
    <Message Importance="Normal" Text="  SDK Sources: %(_WasmPackager_SdkSources.Identity) - %(_WasmPackager_SdkSources.Source) - %(_WasmPackager_SdkSources.Intermediate)" />
    <Message Importance="Normal" Text="  Linker Inputs: %(_WasmPackager_Assemblies.Name) - %(_WasmPackager_Assemblies.LinkerInput)" Condition="'$(WasmPackager_EnableLinker)' == 'true'" />
    <Message Importance="Normal" Text="  Linker Outputs: %(_WasmPackager_Assemblies.Name) - %(_WasmPackager_Assemblies.LinkerOutput)" Condition="'$(WasmPackager_EnableLinker)' == 'true'" />

    <!-- Include all the results here and separate item lists. -->
    <ItemGroup>
      <__WasmPackager_AllResolveResults Include="'$(_WasmPackager_ConfigHash)';@(_WasmPackager_FileList)" />
      <__WasmPackager_AllResolveResults Include="A;@(_WasmPackager_Assemblies->'%(Identity):%(SrcPath):%(AOT):%(LinkerInput)')" />
      <__WasmPackager_AllResolveResults Include="S;@(_WasmPackager_SdkSources->'%(Identity):%(Emcc_Output):%(Emcc_Flags):%(Emcc_Deps)') " />
    </ItemGroup>

    <Hash ItemsToHash="@(__WasmPackager_AllResolveResults)">
      <Output TaskParameter="HashResult" PropertyName="_WasmPackager_ResolveHash" />
    </Hash>

    <WriteLinesToFile
      Lines="$(_WasmPackager_ResolveHash)"
      File="$(_WasmPackager_ResolveCache)"
      Overwrite="True"
      WriteOnlyWhenDifferent="True" />

    <Message Importance="High" Text="WasmPackager - done resolving assemblies, resolve hash is $(_WasmPackager_ResolveHash)" />
  </Target>

</Project>
