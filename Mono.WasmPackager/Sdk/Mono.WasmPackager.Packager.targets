<Project>

  <UsingTask TaskName="Mono.WasmPackager.GenerateICallTable" AssemblyFile="$(_WasmPackager_PackagerAssembly)" />
  <UsingTask TaskName="Mono.WasmPackager.GeneratePInvokeTable" AssemblyFile="$(_WasmPackager_PackagerAssembly)" />
  <UsingTask TaskName="Mono.WasmPackager.GetFirstItem" AssemblyFile="$(_WasmPackager_PackagerAssembly)" />
  <UsingTask TaskName="Mono.WasmPackager.CompileAot" AssemblyFile="$(_WasmPackager_PackagerAssembly)" />

  <!-- Target Dependencies -->
  <PropertyGroup>
    <_WasmPackager_Require_Resolve>
      _WasmPackager_ResolveProperties;
      _WasmPackager_Resolve;
    </_WasmPackager_Require_Resolve>
    <_WasmPackager_Require_PreLink>
      $(_WasmPackager_Require_Resolve);
      _WasmPackager_CopySources;
    </_WasmPackager_Require_PreLink>
    <_WasmPackager_Require_PostLink>
      $(_WasmPackager_Require_Link);
      $(_WasmPackager_Require_PreLink);
      $(_WasmPackager_Require_PostLink);
      _WasmPackager_CreateDummyAssemblies;
    </_WasmPackager_Require_PostLink>
    <_WasmPackager_Require_Generator>
      _WasmPackager_GenerateDriver;
      _WasmPackager_GenerateMonoConfig;
      _WasmPackager_GeneratePInvokeTable;
      _WasmPackager_CilStrip;
    </_WasmPackager_Require_Generator>
    <_WasmPackager_Require_AppBundle_Inputs>
      $(_WasmPackager_Require_PostLink);
      $(_WasmPackager_Require_Generator);
      WasmPackager_LinkEmcc;
    </_WasmPackager_Require_AppBundle_Inputs>
    <_WasmPackager_Require_AppBundle>
      _WasmPackager_GenerateAppBundle;
    </_WasmPackager_Require_AppBundle>
  </PropertyGroup>

  <!-- 
    Generates the mono-config.js
  -->
  <Target
      Name="_WasmPackager_GenerateMonoConfig"
      DependsOnTargets="$(_WasmPackager_Require_PostLink)"
      Inputs="$(_WasmPackager_ResolveCache)"
      Outputs="$(_WasmPackager_MonoConfig)">

    <ItemGroup>
      <__WasmPackager_MonoConfig_FileList Include="&quot;%(_WasmPackager_FileList.FileName)%(_WasmPackager_FileList.Extension)&quot;" />
    </ItemGroup>

    <PropertyGroup>
      <__WasmPackager_MonoConfig_EnableDebug Condition="'$(WasmPackager_EnableDebug)' == 'true'">1</__WasmPackager_MonoConfig_EnableDebug>
      <__WasmPackager_MonoConfig_EnableDebug Condition="'$(WasmPackager_EnableDebug)' != 'true'">0</__WasmPackager_MonoConfig_EnableDebug>
      <__WasmPackager_MonoConfig_Contents>
config = {
 	vfs_prefix: "$(WasmPackager_VfsPrefix)",
 	deploy_prefix: "$(WasmPackager_DeployPrefix)",
 	enable_debugging: $(__WasmPackager_MonoConfig_EnableDebug),
 	file_list: [ @(__WasmPackager_MonoConfig_FileList, ',') ]
}      
      </__WasmPackager_MonoConfig_Contents>
    </PropertyGroup>

    <!--
      Don't set WriteOnlyWhenDifferent="true" here as this will confuse automated dependency tracking and
      this entire target will already be skipped on unchanged inputs via the $(_WasmPackager_ResolveCache).
    -->
    <WriteLinesToFile
        File="$(_WasmPackager_MonoConfig)"
        Lines="$(__WasmPackager_MonoConfig_Contents)"
        Overwrite="true" WriteOnlyWhenDifferent="false" />

    <Message Importance="High" Text="WasmPackager - wrote $(_WasmPackager_MonoConfig)" />
  </Target>

  <!-- 
    Generates the driver-gen.c
  -->
  <Target
      Name="_WasmPackager_GenerateDriver"
      DependsOnTargets="$(_WasmPackager_Require_PostLink)"
      Inputs="$(_WasmPackager_ResolveCache)"
      Outputs="$(_WasmPackager_DriverGen)">

    <ItemGroup>
      <__WasmPackager_AotAssemblies_SymbolList Include="@(_WasmPackager_Assemblies->'%(Name)'->Replace ('.', '_')->Replace ('-', '_'))" Condition="'%(AOT)' == 'true'" />
      <__WasmPackager_AotAssemblies_Symbols Include="$([System.String]::Format('mono_aot_module_{0}_info', %(__WasmPackager_AotAssemblies_SymbolList.Identity)))" />

      <__WasmPackager_DriverGen_Lines Include="@(__WasmPackager_AotAssemblies_Symbols->'extern void %2A%(Identity);')" />
      <__WasmPackager_DriverGen_Lines Include="static void register_aot_modules ()" />
      <__WasmPackager_DriverGen_Lines Include="{" />
      <__WasmPackager_DriverGen_Lines Include="@(__WasmPackager_AotAssemblies_Symbols->'    mono_aot_register_module (%(Identity));')" />
      <__WasmPackager_DriverGen_Lines Include="}" />

      <__WasmPackager_DriverGen_Lines Include="@(WasmPackager_Profilers->'void mono_profiler_init_%(Identity) (const char %2Adesc);')" />
      <__WasmPackager_DriverGen_Lines Include="@(WasmPackager_Profilers->'EMSCRIPTEN_KEEPALIVE void mono_wasm_load_profiler_%(Identity) (const char *desc) { mono_profiler_init_%(Identity) (desc); }')" />
      <__WasmPackager_DriverGen_Lines Include="#define EE_MODE_LLVMONLY_INTERP 1" Condition="'$(WasmPackager_ExecMode)' == 'AotInterp'" />
      <__WasmPackager_DriverGen_Lines Include="#define EE_MODE_LLVMONLY 1" Condition="'$(WasmPackager_ExecMode)' == 'Aot'" />
      <__WasmPackager_DriverGen_Lines Include="#define LINK_ICALLS 1" Condition="'$(WasmPackager_LinkIcalls)' == 'true'" />
    </ItemGroup>

    <Message Importance="Normal" Text="WasmPackager - AotAssemblies: %(_WasmPackager_Assemblies.Name) - %(_WasmPackager_Assemblies.Identity)" Condition="'%(AOT)' == 'true'" />

    <!--
      Don't set WriteOnlyWhenDifferent="true" here as this will confuse automated dependency tracking and
      this entire target will already be skipped on unchanged inputs via the $(_WasmPackager_ResolveCache).
    -->
    <WriteLinesToFile
        File="$(_WasmPackager_DriverGen)"
        Lines="@(__WasmPackager_DriverGen_Lines)"
        Overwrite="true" WriteOnlyWhenDifferent="false" />
  </Target>

    <!-- 
    Generates the pinvoke-table.h
  -->
  <Target
      Name="_WasmPackager_GeneratePInvokeTable"
      DependsOnTargets="$(_WasmPackager_Require_PostLink)"
      Inputs="@(_WasmPackager_Assemblies->'%(LinkerOutput)')"
      Outputs="$(_WasmPackager_PInvokeTable)"
      Condition="'$(_WasmPackager_PInvokeTable)' != ''">
      <GeneratePInvokeTable
          NativeLibraries="System.Native;@(WasmPackager_PInvokeLibraries)"
          Assemblies="@(_WasmPackager_Assemblies->'%(LinkerOutput)')"
          OutputFile="$(_WasmPackager_PInvokeTable)" />
  </Target>

  <Target
      Name="_WasmPackager_CopySources"
      DependsOnTargets="$(_WasmPackager_Require_Resolve)"
      Inputs="@(_WasmPackager_Copy_Inputs)"
      Outputs="@(_WasmPackager_Copy_Outputs)">
      <Message Importance="High" Text="WasmPackager - copy sources" />
      <Message Importance="Normal" Text="  copy inputs: %(_WasmPackager_Copy_Inputs.Identity)" />
      <Message Importance="Normal" Text="  copy outputs: %(_WasmPackager_Copy_Outputs.Identity)" />

      <Copy
          SourceFiles="@(_WasmPackager_Copy_Inputs)"
          DestinationFiles="@(_WasmPackager_Copy_Outputs)"
          SkipUnchangedFiles="true" />

      <Message Importance="High" Text="WasmPackager - copy sources done" />
  </Target>

  <Target Name="_WasmPackager_ResolvePostLinkDummies"
    DependsOnTargets="$(_WasmPackager_Require_Link)">

    <Message Importance="High" Text="_WasmPackager_ResolvePostLinkDummies" />

    <!-- Now filter those missing in the output dir. -->
    <ItemGroup>
      <__WasmPackager_PostLink_Dummies Include="@(_WasmPackager_Assemblies)" Condition="!Exists('%(LinkerOutput)')">
        <Dummy>$(_WasmPackager_LinkerOutput_Dir)/%(Filename).dummy</Dummy>
        <LinkerOutput>$(_WasmPackager_LinkerOutput_Dir)/%(Filename)%(Extension)</LinkerOutput>
      </__WasmPackager_PostLink_Dummies>
    </ItemGroup>

    <Message Importance="High" Text="_WasmPackager_ResolvePostLinkDummies done: @(__WasmPackager_PostLink_Dummies)" />

  </Target>

  <Target Name="_WasmPackager_CreateDummyAssemblies"
    Inputs="@(__WasmPackager_PostLink_Dummies->'%(Dummy)')"
    Outputs="@(__WasmPackager_PostLink_Dummies->'%(LinkerOutput)')"
    DependsOnTargets="$(_WasmPackager_Require_Link);_WasmPackager_ResolvePostLinkDummies">

    <Message Importance="High" Text="_WasmPackager_CreateDummyAssemblies" />

    <Message Importance="Normal" Text="  Dummy: %(__WasmPackager_PostLink_Dummies.Dummy)" />
    <Message Importance="Normal" Text="  Output: %(__WasmPackager_PostLink_Dummies.LinkerOutput)" />
    <WriteLinesToFile
      File="%(__WasmPackager_PostLink_Dummies.Dummy)"
      Lines=""
      Overwrite="true" WriteOnlyWhenDifferent="false" />

    <ItemGroup Condition="'$(WasmPackager_EnableNetCore)' != 'true'">
      <__WasmPackager_AotDummy_References Include="$(WasmPackager_MonoBclPath)/mscorlib.dll" />
    </ItemGroup>

    <Csc Sources="%(__WasmPackager_PostLink_Dummies.Dummy)"
      Deterministic="true"
      TargetType="library"
      EmitDebugInformation="$(WasmPackager_EnableDebug)"
      References="@(__WasmPackager_AotDummy_References)"
      OutputAssembly="%(__WasmPackager_PostLink_Dummies.LinkerOutput)"
    />
  </Target>

  <Target Name="_WasmPackager_CompileAot"
    Inputs="@(_WasmPackager_Assemblies->'%(LinkerOutput)')"
    Outputs="@(_WasmPackager_Assemblies->'%(LlvmOutFile)')"
    DependsOnTargets="$(_WasmPackager_Require_Generator)">

    <Message Importance="High" Text="_WasmPackager_CompileAot" />

    <!--
      Be careful here not to copy any of those %(_WasmPackager_Assemblies.DepFile)
      or similar expressions into a <PropertyGroup>; that would cause that property
      to be assigned once for each file - which is not what we want.

      By having the %(...) expressions inside the <CompileAot>, we ensure that it gets
      called once for each input and the condition also correctly applies.

      Also note that first the <CompileAot> task will be invoked for each file - and
      then execution will move on to the <Copy>.  Which means that we could in theory
      use the @(_WasmPackager_Assemblies->'%(LinkerOutput)') expression in there -
      but that wouldn't correctly filter out the non-AOT assemblies.

      This may look a bit ugly, but it allows us to have everything in one single
      @(_WasmPackager_Assemblies) item rather than having a dozen different ones.
    -->
    <CompileAot
        MonoCrossBin="$(_WasmPackager_MonoCrossBin)"
        MonoPath="$(_WasmPackager_AotInput_Dir)"
        Inputs="%(_WasmPackager_Assemblies.LinkerOutput)"
        AotArgs="@(_WasmPackager_AotArgs, ','),depfile=%(_WasmPackager_Assemblies.DepFile),llvm-outfile=%(_WasmPackager_Assemblies.LlvmOutFileTemp)"
        Condition="'%(_WasmPackager_Assemblies.AOT)' == 'true' AND '%(_WasmPackager_Assemblies.Dummy)' != 'true'"
     />

    <Copy
        SourceFiles="%(_WasmPackager_Assemblies.LlvmOutFileTemp)"
        DestinationFiles="%(_WasmPackager_Assemblies.LlvmOutFile)"
        SkipUnchangedFiles="true"
        Condition="'%(AOT)' == 'true' AND '%(Dummy)' != 'true'"
    />

    <Message Importance="High" Text="_WasmPackager_CompileAot - done" />

  </Target>

  <Target Name="_WasmPackager_Dedup"
    Inputs="$(_WasmPackager_AotDummy)"
    Outputs="@(_WasmPackager_Assemblies->'%(LlvmOutFile)')"
    DependsOnTargets="_WasmPackager_CompileAot">

    <Message Importance="High" Text="_WasmPackager_Dedup $(_WasmPackager_AotDummy)" />

    <!--
      This is different from the situation in _WasmPackager_CompileAot.
      Here, we want to invoke the `CompileAot` target once with all the inputs, so we need
      to avoid using any %(...) expressions inside the <CompileAot>.
    -->

    <PropertyGroup>
      <__WasmPackager_Dedup_FileName>$([System.IO.Path]::GetFileNameWithoutExtension('$(_WasmPackager_AotDummy)'))</__WasmPackager_Dedup_FileName>
      <__WasmPackager_Dedup_LlvmOutFile>$(_WasmPackager_AotInput_Dir)/$(__WasmPackager_Dedup_FileName).bc</__WasmPackager_Dedup_LlvmOutFile>
      <__WasmPackager_Dedup_LlvmOutFileTemp>$(_WasmPackager_AotInput_Dir)/$(__WasmPackager_Dedup_FileName).bc.tmp</__WasmPackager_Dedup_LlvmOutFileTemp>
    </PropertyGroup>

    <ItemGroup>
      <__WasmPackager_Dedup_Inputs Include="@(_WasmPackager_Assemblies->'%(LinkerOutput)')" Condition="'%(AOT)' == 'true'" />
      <__WasmPackager_Dedup_Inputs Include="$(_WasmPackager_AotDummy)" />
    </ItemGroup>

    <CompileAot
        MonoCrossBin="$(_WasmPackager_MonoCrossBin)"
        MonoPath="$(_WasmPackager_AotInput_Dir)"
        Inputs="@(__WasmPackager_Dedup_Inputs)"
        AotArgs="@(_WasmPackager_AotBaseArgs, ','),llvm-outfile=$(__WasmPackager_Dedup_LlvmOutFileTemp),dedup-include=$(__WasmPackager_Dedup_FileName).dll"
    />

    <Copy
        SourceFiles="$(__WasmPackager_Dedup_LlvmOutFileTemp)"
        DestinationFiles="$(__WasmPackager_Dedup_LlvmOutFile)"
        SkipUnchangedFiles="true"
    />

  </Target>

  <Target Name="_WasmPackager_GenerateAppBundle"
    DependsOnTargets="$(_WasmPackager_Require_AppBundle_Inputs)"
    Inputs="@(_WasmPackager_AppBundle_Files->'%(Source)');@(_WasmPackager_Assemblies->'%(FinalPath)');@(_WasmPackager_Assemblies->'%(FinalPath_PDB)')"
    Outputs="@(_WasmPackager_AppBundle_Files->'%(AppPath)');@(_WasmPackager_Assemblies->'%(AppPath)');@(_WasmPackager_Assemblies->'%(AppPath_PDB)')">

    <Message Importance="High" Text="_WasmPackager_GenerateAppBundle: $(WasmPackager_AppDir)" />

    <MakeDir Directories="$(WasmPackager_AppDir)" />

    <Copy
        SourceFiles="@(_WasmPackager_AppBundle_Files->'%(Source)');@(_WasmPackager_Assemblies->'%(FinalPath)');@(_WasmPackager_Assemblies->'%(FinalPath_PDB)')"
        DestinationFiles="@(_WasmPackager_AppBundle_Files->'%(AppPath)');@(_WasmPackager_Assemblies->'%(AppPath)');@(_WasmPackager_Assemblies->'%(AppPath_PDB)')"
        SkipUnchangedFiles="true" />

  </Target>

  <Target Name="_WasmPackager_NetFramework"
    DependsOnTargets="$(_WasmPackager_NetFramework_DependsOn); $(_WasmPackager_Require_AppBundle)">
    <Message Importance="High" Text="WasmPackager: $(WasmPackager_BuildDir)" />

    <ItemGroup>
      <!-- Disable _CopyAppConfigFile and friends -->
      <AppConfigWithTargetPath Remove="@(AppConfigWithTargetPath)" />
    </ItemGroup>

    <Message Importance="High" Text="WasmPackager: MARTIN TEST: $(WasmPackager_BuildDir)" />

  </Target>

  <PropertyGroup>
    <LinkBlazorApplicationDependsOn>
      $(LinkBlazorApplicationDependsOn);
      WasmPackager;
      MartinTest;
      NotExistent;
    </LinkBlazorApplicationDependsOn>
    <LinkerOptimizerDependsOn>
      $(LinkerOptimizerDependsOn);
    </LinkerOptimizerDependsOn>
    <_WasmPackager_NetFramework_DependsOn>
      $(_WasmPackager_NetFramework_DependsOn);
      _WasmPackager_CompileAot;
      _WasmPackager_Dedup;
    </_WasmPackager_NetFramework_DependsOn>
    <WasmPackager_Emcc_DependsOn>
      $(WasmPackager_Emcc_DependsOn);
      $(_WasmPackager_Require_PostLink);
      _WasmPackager_CompileAot;
    </WasmPackager_Emcc_DependsOn>

    <TargetsTriggeredByCompilation>_WasmPackager_NetFramework;</TargetsTriggeredByCompilation>
    <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
    <SkipCopyBuildProduct>true</SkipCopyBuildProduct>
    <SkipCopyingSymbolsToOutputDirectory>true</SkipCopyingSymbolsToOutputDirectory>
  </PropertyGroup>

</Project>
